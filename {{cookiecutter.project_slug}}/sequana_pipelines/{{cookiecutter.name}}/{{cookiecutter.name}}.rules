#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################

"""{{cookiecutter.name}} pipeline

Author: Sequana Developers

This pipeline is part of Sequana project (sequana.readthedocs.io)

Execution:
1. prepare the pipelie:

    sequana_{{cookiecutter.name}} --help

2. exceute it either manually:

    snakemake -s {{cookiecutter.name}}.rules --forceall --stats stats.txt --cores 4

or following the instructions from step 1.

from sequana_pipetools import snaketools as sm

# This must be defined before the include
configfile: "config.yaml"


# A convenient manager
manager = sm.PipelineManager("{{cookiecutter.name}}", config)

rule pipeline:
    input: "multiqc/multiqc_report.html"


# FASTQC on input data set
__fastqc_samples__input_fastq = manager.getrawdata()
__fastqc_samples__output_done = "samples/{sample}/{sample}.done"
__fastqc_samples__wkdir       = "samples/{sample}" # manager.getwkdir("fastqc_samples")
__fastqc_samples__log = "samples/%s/fastqc.log" % manager.sample
include: fastqc_dynamic("samples", manager)


__multiqc__input = expand(__fastqc_samples__output_done, sample=manager.samples)

rule multiqc:
    input: __multiqc__input
    output: __multiqc__output
    params:
        inputdir = config['multiqc']['indir'],
        outdir="multiqc",
        config="multiqc_config.yaml",
        options = config["multiqc"]["options"] 
    shell:
        """
        multiqc {params.inputdir} -o {params.outdir} -c {params.config} {params.options} 2> multiqc/multiqc.log
        """

# Those rules takes a couple of seconds so no need for a cluster
localrules: multiqc


onsuccess:
    print("Please open the report index.html or {}".format(__multiqc__output))
    shell("ln -f -s {} index.html".format(__multiqc__output))
    shell("rm -f ./samples/*/*.done")
    shell("rm -f ./samples/*/*.log")
    shell("chmod -R g+w .")
    
    import colorlog
    log = colorlog.getLogger("sequana.{{cookiecutter.name}}")
    log.setLevel("INFO")

    manager.teardown()
    print("Once done, please clean up the directory using\n'make clean'")

onerror:
    from sequana_pipetools.errors import PipeError
    p = PipeError("{{cookiecutter.name}}")
    p.status()
